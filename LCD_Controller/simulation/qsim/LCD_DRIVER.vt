// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/18/2013 11:15:54"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LCD_Display_Controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LCD_Display_Controller_vlg_sample_tst(
	CLK_50Mhz,
	MessageNumber,
	Reset_L,
	WriteMessage_L,
	sampler_tx
);
input  CLK_50Mhz;
input [3:0] MessageNumber;
input  Reset_L;
input  WriteMessage_L;
output sampler_tx;

reg sample;
time current_time;
always @(CLK_50Mhz or MessageNumber or Reset_L or WriteMessage_L)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LCD_Display_Controller_vlg_check_tst (
	DB,
	DriverReady,
	E,
	LCD_BLON_DE2,
	LCD_ON_DE2,
	Ready_H,
	RomOut,
	RS,
	RW,
	sampler_rx
);
input [7:0] DB;
input  DriverReady;
input  E;
input  LCD_BLON_DE2;
input  LCD_ON_DE2;
input  Ready_H;
input [7:0] RomOut;
input  RS;
input  RW;
input sampler_rx;

reg [7:0] DB_expected;
reg  DriverReady_expected;
reg  E_expected;
reg  LCD_BLON_DE2_expected;
reg  LCD_ON_DE2_expected;
reg  Ready_H_expected;
reg [7:0] RomOut_expected;
reg  RS_expected;
reg  RW_expected;

reg [7:0] DB_prev;
reg  DriverReady_prev;
reg  E_prev;
reg  LCD_BLON_DE2_prev;
reg  LCD_ON_DE2_prev;
reg  Ready_H_prev;
reg [7:0] RomOut_prev;
reg  RS_prev;
reg  RW_prev;

reg [7:0] DB_expected_prev;
reg  DriverReady_expected_prev;
reg  E_expected_prev;
reg  Ready_H_expected_prev;
reg [7:0] RomOut_expected_prev;
reg  RS_expected_prev;
reg  RW_expected_prev;

reg [7:0] last_DB_exp;
reg  last_DriverReady_exp;
reg  last_E_exp;
reg  last_Ready_H_exp;
reg [7:0] last_RomOut_exp;
reg  last_RS_exp;
reg  last_RW_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	DB_prev = DB;
	DriverReady_prev = DriverReady;
	E_prev = E;
	LCD_BLON_DE2_prev = LCD_BLON_DE2;
	LCD_ON_DE2_prev = LCD_ON_DE2;
	Ready_H_prev = Ready_H;
	RomOut_prev = RomOut;
	RS_prev = RS;
	RW_prev = RW;
end

// update expected /o prevs

always @(trigger)
begin
	DB_expected_prev = DB_expected;
	DriverReady_expected_prev = DriverReady_expected;
	E_expected_prev = E_expected;
	Ready_H_expected_prev = Ready_H_expected;
	RomOut_expected_prev = RomOut_expected;
	RS_expected_prev = RS_expected;
	RW_expected_prev = RW_expected;
end


// expected DB[ 7 ]
initial
begin
	DB_expected[7] = 1'b1;
	DB_expected[7] = #499306 1'b0;
	DB_expected[7] = #339856 1'b1;
end 
// expected DB[ 6 ]
initial
begin
	DB_expected[6] = 1'b0;
end 
// expected DB[ 5 ]
initial
begin
	DB_expected[5] = 1'b0;
	DB_expected[5] = #501149 1'b1;
	DB_expected[5] = #339856 1'b0;
end 
// expected DB[ 4 ]
initial
begin
	DB_expected[4] = 1'b0;
	DB_expected[4] = #500357 1'b1;
	DB_expected[4] = #339856 1'b0;
end 
// expected DB[ 3 ]
initial
begin
	DB_expected[3] = 1'b0;
	DB_expected[3] = #500377 1'b1;
	DB_expected[3] = #339856 1'b0;
end 
// expected DB[ 2 ]
initial
begin
	DB_expected[2] = 1'b0;
end 
// expected DB[ 1 ]
initial
begin
	DB_expected[1] = 1'b0;
end 
// expected DB[ 0 ]
initial
begin
	DB_expected[0] = 1'b0;
end 

// expected E
initial
begin
	E_expected = 1'b0;
	E_expected = #541375 1'b1;
	E_expected = #239917 1'b0;
end 

// expected Ready_H
initial
begin
	Ready_H_expected = 1'b0;
end 

// expected RS
initial
begin
	RS_expected = 1'b1;
	RS_expected = #499100 1'b0;
	RS_expected = #339653 1'b1;
end 

// expected RW
initial
begin
	RW_expected = 1'b1;
	RW_expected = #501019 1'b0;
	RW_expected = #320108 1'b1;
end 
// expected RomOut[ 7 ]
initial
begin
	RomOut_expected[7] = 1'b1;
	RomOut_expected[7] = #499306 1'b0;
	RomOut_expected[7] = #339856 1'b1;
end 
// expected RomOut[ 6 ]
initial
begin
	RomOut_expected[6] = 1'b0;
end 
// expected RomOut[ 5 ]
initial
begin
	RomOut_expected[5] = 1'b0;
	RomOut_expected[5] = #501100 1'b1;
	RomOut_expected[5] = #339856 1'b0;
end 
// expected RomOut[ 4 ]
initial
begin
	RomOut_expected[4] = 1'b0;
	RomOut_expected[4] = #500681 1'b1;
	RomOut_expected[4] = #339856 1'b0;
end 
// expected RomOut[ 3 ]
initial
begin
	RomOut_expected[3] = 1'b0;
	RomOut_expected[3] = #500202 1'b1;
	RomOut_expected[3] = #339856 1'b0;
end 
// expected RomOut[ 2 ]
initial
begin
	RomOut_expected[2] = 1'b0;
end 
// expected RomOut[ 1 ]
initial
begin
	RomOut_expected[1] = 1'b0;
end 
// expected RomOut[ 0 ]
initial
begin
	RomOut_expected[0] = 1'b0;
end 

// expected DriverReady
initial
begin
	DriverReady_expected = 1'b1;
	DriverReady_expected = #501341 1'b0;
	DriverReady_expected = #320108 1'b1;
end 
// generate trigger
always @(DB_expected or DB or DriverReady_expected or DriverReady or E_expected or E or LCD_BLON_DE2_expected or LCD_BLON_DE2 or LCD_ON_DE2_expected or LCD_ON_DE2 or Ready_H_expected or Ready_H or RomOut_expected or RomOut or RS_expected or RS or RW_expected or RW)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected DB = %b | expected DriverReady = %b | expected E = %b | expected LCD_BLON_DE2 = %b | expected LCD_ON_DE2 = %b | expected Ready_H = %b | expected RomOut = %b | expected RS = %b | expected RW = %b | ",DB_expected_prev,DriverReady_expected_prev,E_expected_prev,LCD_BLON_DE2_expected_prev,LCD_ON_DE2_expected_prev,Ready_H_expected_prev,RomOut_expected_prev,RS_expected_prev,RW_expected_prev);
	$display("| real DB = %b | real DriverReady = %b | real E = %b | real LCD_BLON_DE2 = %b | real LCD_ON_DE2 = %b | real Ready_H = %b | real RomOut = %b | real RS = %b | real RW = %b | ",DB_prev,DriverReady_prev,E_prev,LCD_BLON_DE2_prev,LCD_ON_DE2_prev,Ready_H_prev,RomOut_prev,RS_prev,RW_prev);
`endif
	if (
		( DB_expected_prev[0] !== 1'bx ) && ( DB_prev[0] !== DB_expected_prev[0] )
		&& ((DB_expected_prev[0] !== last_DB_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[0] = DB_expected_prev[0];
	end
	if (
		( DB_expected_prev[1] !== 1'bx ) && ( DB_prev[1] !== DB_expected_prev[1] )
		&& ((DB_expected_prev[1] !== last_DB_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[1] = DB_expected_prev[1];
	end
	if (
		( DB_expected_prev[2] !== 1'bx ) && ( DB_prev[2] !== DB_expected_prev[2] )
		&& ((DB_expected_prev[2] !== last_DB_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[2] = DB_expected_prev[2];
	end
	if (
		( DB_expected_prev[3] !== 1'bx ) && ( DB_prev[3] !== DB_expected_prev[3] )
		&& ((DB_expected_prev[3] !== last_DB_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[3] = DB_expected_prev[3];
	end
	if (
		( DB_expected_prev[4] !== 1'bx ) && ( DB_prev[4] !== DB_expected_prev[4] )
		&& ((DB_expected_prev[4] !== last_DB_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[4] = DB_expected_prev[4];
	end
	if (
		( DB_expected_prev[5] !== 1'bx ) && ( DB_prev[5] !== DB_expected_prev[5] )
		&& ((DB_expected_prev[5] !== last_DB_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[5] = DB_expected_prev[5];
	end
	if (
		( DB_expected_prev[6] !== 1'bx ) && ( DB_prev[6] !== DB_expected_prev[6] )
		&& ((DB_expected_prev[6] !== last_DB_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[6] = DB_expected_prev[6];
	end
	if (
		( DB_expected_prev[7] !== 1'bx ) && ( DB_prev[7] !== DB_expected_prev[7] )
		&& ((DB_expected_prev[7] !== last_DB_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DB_expected_prev);
		$display ("     Real value = %b", DB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_DB_exp[7] = DB_expected_prev[7];
	end
	if (
		( DriverReady_expected_prev !== 1'bx ) && ( DriverReady_prev !== DriverReady_expected_prev )
		&& ((DriverReady_expected_prev !== last_DriverReady_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DriverReady :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DriverReady_expected_prev);
		$display ("     Real value = %b", DriverReady_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_DriverReady_exp = DriverReady_expected_prev;
	end
	if (
		( E_expected_prev !== 1'bx ) && ( E_prev !== E_expected_prev )
		&& ((E_expected_prev !== last_E_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp = E_expected_prev;
	end
	if (
		( Ready_H_expected_prev !== 1'bx ) && ( Ready_H_prev !== Ready_H_expected_prev )
		&& ((Ready_H_expected_prev !== last_Ready_H_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Ready_H :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Ready_H_expected_prev);
		$display ("     Real value = %b", Ready_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Ready_H_exp = Ready_H_expected_prev;
	end
	if (
		( RomOut_expected_prev[0] !== 1'bx ) && ( RomOut_prev[0] !== RomOut_expected_prev[0] )
		&& ((RomOut_expected_prev[0] !== last_RomOut_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[0] = RomOut_expected_prev[0];
	end
	if (
		( RomOut_expected_prev[1] !== 1'bx ) && ( RomOut_prev[1] !== RomOut_expected_prev[1] )
		&& ((RomOut_expected_prev[1] !== last_RomOut_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[1] = RomOut_expected_prev[1];
	end
	if (
		( RomOut_expected_prev[2] !== 1'bx ) && ( RomOut_prev[2] !== RomOut_expected_prev[2] )
		&& ((RomOut_expected_prev[2] !== last_RomOut_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[2] = RomOut_expected_prev[2];
	end
	if (
		( RomOut_expected_prev[3] !== 1'bx ) && ( RomOut_prev[3] !== RomOut_expected_prev[3] )
		&& ((RomOut_expected_prev[3] !== last_RomOut_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[3] = RomOut_expected_prev[3];
	end
	if (
		( RomOut_expected_prev[4] !== 1'bx ) && ( RomOut_prev[4] !== RomOut_expected_prev[4] )
		&& ((RomOut_expected_prev[4] !== last_RomOut_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[4] = RomOut_expected_prev[4];
	end
	if (
		( RomOut_expected_prev[5] !== 1'bx ) && ( RomOut_prev[5] !== RomOut_expected_prev[5] )
		&& ((RomOut_expected_prev[5] !== last_RomOut_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[5] = RomOut_expected_prev[5];
	end
	if (
		( RomOut_expected_prev[6] !== 1'bx ) && ( RomOut_prev[6] !== RomOut_expected_prev[6] )
		&& ((RomOut_expected_prev[6] !== last_RomOut_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[6] = RomOut_expected_prev[6];
	end
	if (
		( RomOut_expected_prev[7] !== 1'bx ) && ( RomOut_prev[7] !== RomOut_expected_prev[7] )
		&& ((RomOut_expected_prev[7] !== last_RomOut_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RomOut[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RomOut_expected_prev);
		$display ("     Real value = %b", RomOut_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_RomOut_exp[7] = RomOut_expected_prev[7];
	end
	if (
		( RS_expected_prev !== 1'bx ) && ( RS_prev !== RS_expected_prev )
		&& ((RS_expected_prev !== last_RS_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_expected_prev);
		$display ("     Real value = %b", RS_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RS_exp = RS_expected_prev;
	end
	if (
		( RW_expected_prev !== 1'bx ) && ( RW_prev !== RW_expected_prev )
		&& ((RW_expected_prev !== last_RW_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RW_expected_prev);
		$display ("     Real value = %b", RW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RW_exp = RW_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LCD_Display_Controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK_50Mhz;
reg [3:0] MessageNumber;
reg Reset_L;
reg WriteMessage_L;
// wires                                               
wire [7:0] DB;
wire DriverReady;
wire E;
wire LCD_BLON_DE2;
wire LCD_ON_DE2;
wire Ready_H;
wire [7:0] RomOut;
wire RS;
wire RW;

wire sampler;                             

// assign statements (if any)                          
LCD_Display_Controller i1 (
// port map - connection between master ports and signals/registers   
	.CLK_50Mhz(CLK_50Mhz),
	.DB(DB),
	.DriverReady(DriverReady),
	.E(E),
	.LCD_BLON_DE2(LCD_BLON_DE2),
	.LCD_ON_DE2(LCD_ON_DE2),
	.MessageNumber(MessageNumber),
	.Ready_H(Ready_H),
	.Reset_L(Reset_L),
	.RomOut(RomOut),
	.RS(RS),
	.RW(RW),
	.WriteMessage_L(WriteMessage_L)
);

// CLK_50Mhz
always
begin
	CLK_50Mhz = 1'b0;
	CLK_50Mhz = #10000 1'b1;
	#10000;
end 

// Reset_L
initial
begin
	Reset_L = 1'b0;
	Reset_L = #480000 1'b1;
end 

// WriteMessage_L
initial
begin
	WriteMessage_L = 1'b1;
	WriteMessage_L = #2320000 1'b0;
	WriteMessage_L = #240000 1'b1;
end 
// MessageNumber[ 3 ]
initial
begin
	MessageNumber[3] = 1'b0;
end 
// MessageNumber[ 2 ]
initial
begin
	MessageNumber[2] = 1'b0;
end 
// MessageNumber[ 1 ]
initial
begin
	MessageNumber[1] = 1'b0;
end 
// MessageNumber[ 0 ]
initial
begin
	MessageNumber[0] = 1'b0;
end 

LCD_Display_Controller_vlg_sample_tst tb_sample (
	.CLK_50Mhz(CLK_50Mhz),
	.MessageNumber(MessageNumber),
	.Reset_L(Reset_L),
	.WriteMessage_L(WriteMessage_L),
	.sampler_tx(sampler)
);

LCD_Display_Controller_vlg_check_tst tb_out(
	.DB(DB),
	.DriverReady(DriverReady),
	.E(E),
	.LCD_BLON_DE2(LCD_BLON_DE2),
	.LCD_ON_DE2(LCD_ON_DE2),
	.Ready_H(Ready_H),
	.RomOut(RomOut),
	.RS(RS),
	.RW(RW),
	.sampler_rx(sampler)
);
endmodule

